#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

struct Fibonacci_heap {
    struct node {
        int key;
        node *parent = nullptr; // —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
        node *child = nullptr;  // —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å—ã–Ω–∞
        node *left;   // —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ª–µ–≤—ã–π —É–∑–µ–ª —Ç–æ–≥–æ –∂–µ –ø—Ä–µ–¥–∫–∞
        node *right;  // —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø—Ä–∞–≤—ã–π —É–∑–µ–ª —Ç–æ–≥–æ –∂–µ –ø—Ä–µ–¥–∫–∞
        int degree = 0;   // —Å—Ç–µ–ø–µ–Ω—å –≤–µ—Ä—à–∏–Ω—ã (–∫–æ–ª-–≤–æ –¥–µ—Ç–µ–π)
        bool mark = false;    // –±—ã–ª –ª–∏ —É–¥–∞–ª–µ–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª—é—á–∞ —Å—ã–Ω —ç—Ç–æ–π –≤–µ—Ä—à–∏–Ω—ã

        size_t vertex;
        bool extracted = false;

        node(int x) : key(x) {
            left = this;
            right = this;
        }
    };

    int size;  // —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ —É–∑–ª–æ–≤
    node *min; // —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –∫–æ—Ä–µ–Ω—å –¥–µ—Ä–µ–≤–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º

    Fibonacci_heap() : size(0), min(nullptr) {}


    // –≤—Å—Ç–∞–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–Ω–µ–π –ø—Ä–∞–≤–µ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    void enqueue(node *new_node) {
        if (size == 0) {
            min = new_node;
        } else {
            node *prev_right = min->right;

            min->right = new_node;
            new_node->left = min;
            new_node->right = prev_right;
            prev_right->left = new_node;
        }

        if (new_node->key < min->key)
            min = new_node;

        size++;
    }

    // –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Å–ª–∏—è–Ω–∏—è –¥–≤—É—Ö –∫—É—á
    void union_lists(node *first, node *second) {
        node *left = first->left;
        node *right = second->right;

        left->right = right;
        right->left = left;

        second->right = first;
        first->left = second;
    }

    // c–ª–∏—è–Ω–∏–µ –¥–≤—É—Ö –∫—É—á
    [[maybe_unused]] void merge(Fibonacci_heap *other) {
        if (other->size == 0) return;
        if (size == 0) {
            min = other->min;
            size = other->size;
            return;
        }

        union_lists(min, other->min);
        if (other->min->key < min->key) {
            min = other->min;
        }

        size += other->size;
    }

    void unparent_node_list(node *start) {
        node *current = start->right;
        start->parent = nullptr;

        while (current != start) {
            current->parent = nullptr;
            current = current->right;
        }
    }

    node *dequeue_min() {
        min->extracted = true;

        node *previous_min = min;

        // —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å –∫–æ—Ä–Ω–µ–≤—ã–º —Å–ø–∏—Å–∫–æ–º
        if (min->child != nullptr) {
            unparent_node_list(min->child);
            union_lists(min, min->child);
            min->child = nullptr;
        }

        node *min_right = min->right;

        // –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç
        if (previous_min == previous_min->right) {
            min = nullptr;
            size = 0;
        } else {
            min = min->right;
            remove_from_circular_list(previous_min);
            size--;
            consolidate();
        }
        return previous_min;
    }

    /* –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø—Ä–æ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤:
     * –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–º —Å–ø–∏—Å–∫–µ –±—ã–ª–æ –Ω–µ –±–æ–ª–µ–µ max_degree + 1,
     * –≥–¥–µ max_degree - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å –≤–µ—Ä—à–∏–Ω—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–º —Å–ø–∏—Å–∫–µ
     * */
    void consolidate() {
        if (size <= 1) return;
        vector<node *> temp_nodes((int) std::log2(size) + 1, nullptr);

        temp_nodes[min->degree] = min;

        node *current = min->right;

        // –ø–æ–∫–∞ –µ—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
        while (temp_nodes[current->degree] != current) {
            // –Ω–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–Ω–µ–≤—ã–º–∏ –≤–µ—Ä—à–∏–Ω–∞–º–∏
            if (temp_nodes[current->degree] == nullptr) {
                temp_nodes[current->degree] = current;
                current = current->right;
            } else {
                node *conflict_node = temp_nodes[current->degree];
                node *add_to, *to_adding;

                if (conflict_node->key < current->key) {
                    add_to = conflict_node;
                    to_adding = current;
                } else {
                    add_to = current;
                    to_adding = conflict_node;
                }

                remove_from_circular_list(to_adding);
                // –ø–æ–¥–≤–µ—à–∏–≤–∞–µ–º —É–∑–µ–ª to_adding –∫ add_to —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–∏—á–∏—è –¥–µ—Ç–µ–π
                if (add_to->child == nullptr)
                    add_to->child = to_adding;
                else
                    union_lists(add_to->child, to_adding);
                to_adding->mark = false;
                to_adding->parent = add_to;
                temp_nodes[add_to->degree] = nullptr;
                add_to->degree++;
                current = add_to;
            }

            if (current->key <= min->key)
                min = current;
        }
    }

    // –≤—ã—Ä–µ–∑–∞–µ–º –≤–µ—Ä—à–∏–Ω—É –∏–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞: –º–µ–Ω—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    void remove_from_circular_list(node *x) const {
        node *left = x->left;
        node *right = x->right;

        right->left = left;
        left->right = right;

        // –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –≤–µ—Ä—à–∏–Ω—É –Ω–∞ —Å–µ–±–µ
        x->right = x->left = x;
    }

    // –≤—ã—Ä–µ–∑–∞–µ–º —Ä–µ–±–µ–Ω–∫–∞ –∫–∞–∫–æ–π-—Ç–æ –≤–µ—Ä—à–∏–Ω—ã –∏ –ø–æ–¥–≤–µ—à–∏–≤–∞–µ–º –µ–≥–æ x –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É
    void cut_node(node *x) {
        x->parent->degree--;
        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã —Ä–æ–¥–∏—Ç–µ–ª—å x –Ω–µ –ø–æ—Ç–µ—Ä—è–ª —Å–≤—è–∑—å —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Å—ã–Ω–æ–≤—å—è–º–∏
        if (x->parent->child == x) {
            if (x->right == x) {
                x->parent->child = nullptr;
            } else {
                x->parent->child = x->right;
            }
        }
        remove_from_circular_list(x);

        x->parent = nullptr;
        x->mark = false;
        // –ø–æ–¥–≤–µ—à–∏–≤–∞–µ–º –∫ –∫–æ—Ä–Ω—é
        size--;
        enqueue(x);
    }

    void cascading_cut(node *x) {
        while (x->mark and x->parent != nullptr) {
            cut_node(x);
            x = x->parent;
        }
        x->mark = true;
    }

    void decrease_key(node *x, int new_key) {
        // –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ç–æ, —á—Ç–æ –≤–µ—Ä—à–∏–Ω–∞ –≤ –∫—É—á–µ, –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ–≤–µ—Ä—è—Ç—å üôÉ
        if (new_key > x->key) return;
        x->key = new_key;
        // –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–µ—Ä–µ–≤–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
        if (x->parent != nullptr and new_key < x->parent->key) {
            node *parent = x->parent;
            cut_node(x);
            cascading_cut(parent);
        }
        if (new_key < min->key)
            min = x;
    }
};

// prim's algorithm
void minimum_spanning_tree(const vector<vector<int>> adjencency_matrix, size_t n) {
    vector<size_t> parent(n);

    Fibonacci_heap queue;
    vector<Fibonacci_heap::node *> node_vertexes;

    for (size_t i = 0; i < n; i++) {
        parent[i] = -1;
        auto *new_node = new Fibonacci_heap::node(INT16_MAX);
        node_vertexes.push_back(new_node);
        node_vertexes[i]->vertex = i;
    }

    parent[0] = 0;
    node_vertexes[0]->key = 0;
    for (auto v: node_vertexes)
        queue.enqueue(v);

    while (queue.size > 0) {
        Fibonacci_heap::node *curr = queue.dequeue_min();
        for (size_t u = 0; u < n; u++) {
            int weight = adjencency_matrix[curr->vertex][u];
            if (!node_vertexes[u]->extracted and weight != 0 and weight < node_vertexes[u]->key) {
                parent[u] = curr->vertex;
                queue.decrease_key(node_vertexes[u], weight);
            }
        }
    }

    delete node_vertexes[0];
    for (size_t i = 1; i < n; i++) {
        cout << "–≤–µ—Ä—à–∏–Ω–∞ " << i + 1 << " - —Ä–æ–¥–∏—Ç–µ–ª—å " << parent[i] + 1 << ", ";
        cout << "–≤–µ—Å " << node_vertexes[i]->key << endl;
        delete node_vertexes[i];
    }
}

void heap_test() {
    Fibonacci_heap fh;

    Fibonacci_heap::node test_node1(4);
    Fibonacci_heap::node test_node2(1);
    Fibonacci_heap::node test_node3(4);
    fh.enqueue(&test_node1);
    fh.enqueue(&test_node2);
    fh.enqueue(&test_node3);
    cout << fh.dequeue_min()->key << endl;

    Fibonacci_heap::node test_node4(5);

    fh.enqueue(&test_node4);
    fh.decrease_key(&test_node4, 3);

    cout << fh.dequeue_min()->key << endl;
    cout << fh.dequeue_min()->key << endl;
    cout << fh.dequeue_min()->key << endl;
}

int main() {
    // –î–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Å—Ç–æ–≤–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–¥–∞–µ—Ç—Å—è –∫–æ–ª-–≤–æ –≤–µ—Ä—à–∏–Ω, –∞ –∑–∞—Ç–µ–º –º–∞—Ç—Ä–∏—Ü–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–µ–π —Å –≤–µ—Å–∞–º–∏
    // –µ—Å–ª–∏ –≤–µ—Å = 0, —Ç–æ –Ω–µ—Ç —Ä–µ–±—Ä–∞ –≤ —ç—Ç—É –≤–µ—Ä—à–∏–Ω—É
    size_t n;
    cin >> n;
    vector<vector<int>> adjencency_matrix(n, vector(n, 0));
    for (size_t i = 0; i < n; ++i) {
        for (size_t j = 0; j < n; ++j) {
            cin >> adjencency_matrix[i][j];
        }
    }
    minimum_spanning_tree(adjencency_matrix, n);
//    heap_test();
    return 0;
}
