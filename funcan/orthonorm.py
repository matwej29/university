from sympy import *  # Импортируем библиотеку SymPy
from sympy.abc import z  # Импортируем символ z из SymPy

# Задаем список исходных векторов
f_n = [
    Array([1, 1, 0, 0]),  # Вектор 1
    Array([0, 1, 1, 0]),  # Вектор 2
    Array([0, 0, 1, 1]),  # Вектор 3
    Array([0, 0, 0, 1])  # Вектор 4
]


# Функция для вычисления скалярного произведения двух векторов
def scalar(x, y):
    return sum([x[i] * y[i] for i in range(len(x))])


phi_n = []  # Список для хранения нормализованных ортогональных векторов


# Функция для вычисления ортогонального вектора
def h_n(n):
    h = f_n[n]  # Копируем исходный вектор
    for i in range(0, n):
        h -= scalar(f_n[n], phi_n[i]) * phi_n[i]  # Вычитаем проекции на уже найденные ортогональные векторы
    return h


# Функция для нормализации вектора
def phi(h):
    return h / sqrt(scalar(h, h))  # Делим вектор на его норму


# Функция для ортогонализации и нормализации всех векторов
def normalize():
    for i in range(0, len(f_n)):
        phi_n.append(phi(h_n(i)))  # Добавляем нормализованный вектор в список


# Функция для проверки ортогональности полученных векторов
def check():
    for i in range(0, len(f_n)):
        for j in range(0, len(f_n)):
            if i == j: continue
            print(scalar(phi_n[i], phi_n[j]))  # Выводим скалярное произведение пар векторов


normalize()  # Запускаем процесс ортогонализации и нормализации
print(*phi_n, sep='\n')  # Выводим результат
