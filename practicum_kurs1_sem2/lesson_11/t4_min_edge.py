# –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –≥—Ä–∞—Ñ G –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–±–µ—Ä –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω Q
# —Ä–µ–±—Ä–æ - —ç—Ç–æ tuple –≤–∏–¥–∞ (u, v, cost)
def min_edge(G, Q):
    if Q is None or len(Q) == 0: raise ValueError("Q must be not None and not empty")
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ–±—Ä–æ
    min_e = None

    # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–±—Ä–∞ –∏ –∏—â–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–µ–µ —É—Å–ª–æ–≤–∏—è–º
    # –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤ Q –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π –∫–æ–Ω–µ—Ü —Ä–µ–±—Ä–∞!
    for edge in G:
        if (edge[0] in Q) == (edge[1] in Q):
            continue

        if min_e is not None:
            min_e = min(min_e, edge, key=lambda x: x[2])
        else:
            min_e = edge

    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
    return min_e


# —Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω
N = int(input())

# —Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä—à–∏–Ω—ã —Ä–∞–∑—Ä–µ–∑–∞
Q = tuple(int(x) for x in input().split())

edges = []
# —Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–±—Ä–∞
try:
    while True:
        edge = tuple(int(x) for x in input().split())
        edges.append(edge)
except EOFError:
    pass

# –¥–µ–ª–∞–µ–º —Ä–∞–±–æ—Ç—É üë®‚Äçüíª –∏ –ø–µ—á–∞—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
print(min_edge(edges, Q))
